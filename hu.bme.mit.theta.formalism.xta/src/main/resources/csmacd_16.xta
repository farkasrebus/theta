// ------------------------------------------------------------ 
// CSMA/CD 3
// Carrier Sense, Multiple-Access with Collision Detection 
// 
// automatically generated by script genCSMA_CD.awk 
// M. Oliver Moeller <omoeller@brics.dk> 
// Wed Sep 19 11:48:20 2001 
// ------------------------------------------------------------ 
const int N = 16;
const int LAMDA = 404;
const int SIGMA = 13;

typedef int[0, N-1] id_t;
int[0,N-1] j = 0;

chan begin, end, busy;
chan cd[N];

process Bus() {
clock x;
state
    bus_idle,
    bus_active,
    bus_collision {x < SIGMA},
    bus_broadcast;
urgent
    bus_broadcast;
init bus_idle;
trans
    bus_broadcast -> bus_broadcast { guard j < N-1; sync cd[j]!; assign x = 0, j++;  },
    bus_broadcast -> bus_idle { guard j == N - 1; sync cd[j]!; assign j = 0, x = 0;  },
    bus_idle -> bus_active { sync begin ?; assign x = 0;  },
    bus_active -> bus_idle { sync end ?; assign x = 0;  },
    bus_active -> bus_active { guard x >= SIGMA; sync busy !;  },
    bus_active -> bus_collision { guard x < SIGMA; sync begin ?; assign x = 0;  },
    bus_collision -> bus_broadcast { guard x < SIGMA; sync cd[j] !; assign x = 0, j++;  };
}

process Station(const id_t id) {
clock x;
state
    sender_wait,
    sender_transm {x<= LAMDA},
    sender_retry {x <= 2 * SIGMA};
init sender_wait;
trans
    sender_wait -> sender_transm { sync begin !; assign x = 0;  },
    sender_wait -> sender_wait { sync cd[id] ?; assign x = 0;  },
    sender_wait -> sender_retry { sync cd[id] ?; assign x = 0;  },
    sender_wait -> sender_retry { sync busy ?; assign x = 0;  },
    sender_transm -> sender_wait { guard x == LAMDA; sync end !; assign x = 0;  },
    sender_transm -> sender_retry { guard x <= 2 * SIGMA; sync cd[id] ?; assign x = 0;  },
    sender_retry -> sender_transm { guard x <= 2 * SIGMA; sync begin !; assign x = 0;  },
    sender_retry -> sender_retry { guard x <= 2 * SIGMA; sync cd[id] ?; assign x = 0;  };
}
system Bus, Station;